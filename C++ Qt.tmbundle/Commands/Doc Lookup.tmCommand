<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby
require ENV['TM_SUPPORT_PATH']+'/lib/exit_codes'

word = (ENV['TM_SELECTED_TEXT'] or ENV['TM_CURRENT_WORD'] or '')
dir  = (ENV['TM_QT_DOC_DIR'] or '/usr/local/Trolltech/Qt-4.2.0/doc/html')

word.strip! unless word.frozen?

if word.nil?
  puts "Nothing given to search for."
  
else
  doc_file = "#{dir}/#{word.downcase}.html"
  
  if File.exists? doc_file
    TextMate::exit_show_html "&lt;meta http-equiv='Refresh' content='0;URL=tm-file://#{doc_file}'&gt;"
  else
    spotted = `mdfind #{word}`
    files   = spotted.grep %r{^#{Regexp::escape dir}/.+\.html$}
    
    unless files.any?
      puts "No Documentation found for '#{word}'."
    else
      puts %{
      &lt;html&gt;
      &lt;head&gt;&lt;title&gt;Spotlight results for '#{word}'&lt;/title&gt;
      &lt;style&gt;
        a:link { color: #004faf; text-decoration: none }
        a:visited { color: #672967; text-decoration: none }
        h1 { text-align: center }
        span.intro { color: #999 }
        div.navi img {
          vertical-align: -35%;
          margin-right: 4px;
        }
      &lt;/style&gt;
      &lt;body&gt;
      
      &lt;div class="navi"&gt;
        &lt;img src="tm-file://#{dir}/images/qt-logo.png"&gt;
        &lt;a href="tm-file://#{dir}/index.html"&gt;Home&lt;/a&gt; &amp;middot;
        &lt;a href="tm-file://#{dir}/classes.html"&gt;All Classes&lt;/a&gt; &amp;middot;
        &lt;a href="tm-file://#{dir}/mainclasses.html"&gt;Main Classes&lt;/a&gt; &amp;middot;
        &lt;a href="tm-file://#{dir}/groups.html"&gt;Grouped Classes&lt;/a&gt; &amp;middot;
        &lt;a href="tm-file://#{dir}/modules.html"&gt;Modules&lt;/a&gt; &amp;middot;
        &lt;a href="tm-file://#{dir}/functions.html"&gt;Functions&lt;/a&gt;
      &lt;/div&gt;
      
      &lt;h1&gt;Spotlight results for '#{word}'&lt;/h1&gt;&lt;ul&gt;}
      
      files.each do |file|
        head  = File.open(file.chop).read(4000)
        title = head.scan(/&lt;title&gt;Qt \d\.\d: (.+)&lt;\/title&gt;/).first.first
        intro = head.scan(/&lt;p&gt;(.{16,})&lt;\/p&gt;/).first
        
        unless intro.nil?
          intro = intro.first.gsub(/&lt;.+?&gt;/, '')[0..(107-title.size)]+'&amp;hellip;'
        end
        
        puts %{&lt;li&gt;&lt;a href="tm-file://#{file.chop}"&gt;#{title}&lt;/a&gt;
               &lt;span class="intro"&gt;#{intro}&lt;/span&gt;&lt;/li&gt;}
      end
      puts "&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;"
      
      TextMate::exit_show_html
    end
  end
  
end</string>
	<key>input</key>
	<string>none</string>
	<key>keyEquivalent</key>
	<string>^h</string>
	<key>name</key>
	<string>Doc Lookup</string>
	<key>output</key>
	<string>showAsTooltip</string>
	<key>scope</key>
	<string>source.c++.qt</string>
	<key>uuid</key>
	<string>D663259E-0526-11DB-A7A9-0011242E4184</string>
</dict>
</plist>
